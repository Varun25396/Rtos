
/home/STM32F4_RTOS_August_2017/Atollic_TrueStudio_WorkSpaces/WorkSpace_12_08_2017/STM32F4Cube_Atollic_AC6/FreeRTOS_1/STM32F4_Discovery_FreeRTOS_HeartBeat.zip_expanded/HAERT_BEAT_LED_FreeRTOS/Debug/HAERT_BEAT_LED_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002588  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002718  08002718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002768  08002768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  0800276c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          00000d84  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000da8  20000da8  00020024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_line   00008bcd  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000cd7c  00000000  00000000  00028c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e0f  00000000  00000000  0003599d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000770  00000000  00000000  000377b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006a8  00000000  00000000  00037f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002122c  00000000  00000000  000385c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000c34c9  00000000  00000000  000597f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0011ccbd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001bf8  00000000  00000000  0011cd3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000024 	.word	0x20000024
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002700 	.word	0x08002700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000028 	.word	0x20000028
 80001cc:	08002700 	.word	0x08002700

080001d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000208 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001d6:	e003      	b.n	80001e0 <LoopCopyDataInit>

080001d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001de:	3104      	adds	r1, #4

080001e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001e0:	480b      	ldr	r0, [pc, #44]	; (8000210 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001e2:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001e8:	d3f6      	bcc.n	80001d8 <CopyDataInit>
  ldr  r2, =_sbss
 80001ea:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001ec:	e002      	b.n	80001f4 <LoopFillZerobss>

080001ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001f0:	f842 3b04 	str.w	r3, [r2], #4

080001f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001f8:	d3f9      	bcc.n	80001ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001fa:	f000 f9b9 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001fe:	f002 fa53 	bl	80026a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000202:	f000 f80f 	bl	8000224 <main>
  bx  lr    
 8000206:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000208:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800020c:	0800276c 	.word	0x0800276c
  ldr  r0, =_sdata
 8000210:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000214:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8000218:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 800021c:	20000da8 	.word	0x20000da8

08000220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000220:	e7fe      	b.n	8000220 <ADC_IRQHandler>
	...

08000224 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af02      	add	r7, sp, #8
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 800022a:	f000 f9d7 	bl	80005dc <HAL_Init>
 
  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 800022e:	2001      	movs	r0, #1
 8000230:	f000 f8f2 	bl	8000418 <BSP_LED_Init>
//  BSP_LED_Init(LED4);
//  BSP_LED_Init(LED5);
//  BSP_LED_Init(LED6);

  /* Configure the system clock to 168 MHz */
  SystemClock_Config();
 8000234:	f000 f866 	bl	8000304 <SystemClock_Config>
  //lecture - in this implementation, the stack allocated will be used as task stack, which
  //          is independent of the main stack - this will be clear, if you look at the
  //          internals of task creation API and context switching mechanism
  //
  /* Create one of the two tasks. */
  xTaskCreate(    vTask_LED_ON,         /* Pointer to the function that implements the task. */
 8000238:	2300      	movs	r3, #0
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	2302      	movs	r3, #2
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	22f0      	movs	r2, #240	; 0xf0
 8000244:	4908      	ldr	r1, [pc, #32]	; (8000268 <main+0x44>)
 8000246:	4809      	ldr	r0, [pc, #36]	; (800026c <main+0x48>)
 8000248:	f001 fd04 	bl	8001c54 <xTaskCreate>
                                  NULL,           /* We are not using the task parameter. */
								  (tskIDLE_PRIORITY + 2UL),                      /* This task will run at priority 2. */
                                  NULL );         /* We are not using the task handle. */

  /* Create the other task in exactly the same way. */
  xTaskCreate( vTask_LED_OFF, "Task LED OFF", 240, NULL, (tskIDLE_PRIORITY + 2UL), NULL );
 800024c:	2300      	movs	r3, #0
 800024e:	9301      	str	r3, [sp, #4]
 8000250:	2302      	movs	r3, #2
 8000252:	9300      	str	r3, [sp, #0]
 8000254:	2300      	movs	r3, #0
 8000256:	22f0      	movs	r2, #240	; 0xf0
 8000258:	4905      	ldr	r1, [pc, #20]	; (8000270 <main+0x4c>)
 800025a:	4806      	ldr	r0, [pc, #24]	; (8000274 <main+0x50>)
 800025c:	f001 fcfa 	bl	8001c54 <xTaskCreate>
  //
  //lecture - refer to task.h and tasks.c for more comments on vTaskStartScheduler()
  //
  //
  //
  vTaskStartScheduler();
 8000260:	f001 fedc 	bl	800201c <vTaskStartScheduler>
  //lecture - we will reach here, if there is error - otherwise, we should never reach here

  /* If all is well we will never reach here as the scheduler will now be
  running.  If we do reach here then it is likely that there was insufficient
  heap available for the idle task to be created. */
  for( ;; );
 8000264:	e7fe      	b.n	8000264 <main+0x40>
 8000266:	bf00      	nop
 8000268:	08002718 	.word	0x08002718
 800026c:	08000279 	.word	0x08000279
 8000270:	08002724 	.word	0x08002724
 8000274:	080002c5 	.word	0x080002c5

08000278 <vTask_LED_ON>:
        }
}
#endif

static void vTask_LED_ON( void *pvParameters )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	portTickType xLocalLastWakeTime;

   xLastWakeTime1 = xTaskGetTickCount();
 8000280:	f001 ffbc 	bl	80021fc <xTaskGetTickCount>
 8000284:	4603      	mov	r3, r0
 8000286:	461a      	mov	r2, r3
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <vTask_LED_ON+0x48>)
 800028a:	601a      	str	r2, [r3, #0]
   xLocalLastWakeTime = xLastWakeTime1;
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <vTask_LED_ON+0x48>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	60fb      	str	r3, [r7, #12]

   vTaskDelayUntil( &xLocalLastWakeTime, ( 50 / portTICK_RATE_MS ) );
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	2132      	movs	r1, #50	; 0x32
 8000298:	4618      	mov	r0, r3
 800029a:	f001 fe11 	bl	8001ec0 <vTaskDelayUntil>
    /* As per most tasks, this task is implemented in an infinite loop. */
    for( ;; )
    {
    	BSP_LED_On(LED3);
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 f932 	bl	8000508 <BSP_LED_On>
    	vTaskDelay( 200 / portTICK_RATE_MS );
 80002a4:	20c8      	movs	r0, #200	; 0xc8
 80002a6:	f001 fe85 	bl	8001fb4 <vTaskDelay>
    	BSP_LED_On(LED3);
 80002aa:	2001      	movs	r0, #1
 80002ac:	f000 f92c 	bl	8000508 <BSP_LED_On>
    	vTaskDelayUntil( &xLocalLastWakeTime, ( HEART_BEAT_PERIOD / portTICK_RATE_MS ) );
 80002b0:	f107 030c 	add.w	r3, r7, #12
 80002b4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fe01 	bl	8001ec0 <vTaskDelayUntil>
    	BSP_LED_On(LED3);
 80002be:	e7ee      	b.n	800029e <vTask_LED_ON+0x26>
 80002c0:	20000040 	.word	0x20000040

080002c4 <vTask_LED_OFF>:
    }

}

static void vTask_LED_OFF( void *pvParameters )
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	portTickType xLocalLastWakeTime;

   xLocalLastWakeTime = xLastWakeTime1;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <vTask_LED_OFF+0x3c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	60fb      	str	r3, [r7, #12]

   vTaskDelayUntil( &xLocalLastWakeTime, ( 100 / portTICK_RATE_MS ) );
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	2164      	movs	r1, #100	; 0x64
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 fdf1 	bl	8001ec0 <vTaskDelayUntil>

    /* As per most tasks, this task is implemented in an infinite loop. */
    for( ;; )
    {
    	//vTaskDelay( 50 / portTICK_RATE_MS );
    	BSP_LED_Off(LED3);
 80002de:	2001      	movs	r0, #1
 80002e0:	f000 f92c 	bl	800053c <BSP_LED_Off>
    	vTaskDelay( 200 / portTICK_RATE_MS );
 80002e4:	20c8      	movs	r0, #200	; 0xc8
 80002e6:	f001 fe65 	bl	8001fb4 <vTaskDelay>
    	BSP_LED_Off(LED3);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f000 f926 	bl	800053c <BSP_LED_Off>
    	vTaskDelayUntil( &xLocalLastWakeTime, ( HEART_BEAT_PERIOD / portTICK_RATE_MS ) );
 80002f0:	f107 030c 	add.w	r3, r7, #12
 80002f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fde1 	bl	8001ec0 <vTaskDelayUntil>
    	BSP_LED_Off(LED3);
 80002fe:	e7ee      	b.n	80002de <vTask_LED_OFF+0x1a>
 8000300:	20000040 	.word	0x20000040

08000304 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b094      	sub	sp, #80	; 0x50
 8000308:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	4a2f      	ldr	r2, [pc, #188]	; (80003cc <SystemClock_Config+0xc8>)
 8000310:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <SystemClock_Config+0xc8>)
 8000312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000318:	6413      	str	r3, [r2, #64]	; 0x40
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <SystemClock_Config+0xc8>)
 800031c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800031e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	4a29      	ldr	r2, [pc, #164]	; (80003d0 <SystemClock_Config+0xcc>)
 800032c:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <SystemClock_Config+0xcc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000334:	6013      	str	r3, [r2, #0]
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <SystemClock_Config+0xcc>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000342:	2301      	movs	r3, #1
 8000344:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034c:	2302      	movs	r3, #2
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000354:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000356:	2308      	movs	r3, #8
 8000358:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800035a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000360:	2302      	movs	r3, #2
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000364:	2307      	movs	r3, #7
 8000366:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	f107 030c 	add.w	r3, r7, #12
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fc25 	bl	8000bbc <HAL_RCC_OscConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000378:	f000 f82e 	bl	80003d8 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800037c:	230f      	movs	r3, #15
 800037e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000380:	2302      	movs	r3, #2
 8000382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8000388:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800038c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800038e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000392:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000398:	2105      	movs	r1, #5
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fe68 	bl	8001070 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003a6:	f000 f817 	bl	80003d8 <Error_Handler>
  }

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 80003aa:	f000 f963 	bl	8000674 <HAL_GetREVID>
 80003ae:	4602      	mov	r2, r0
 80003b0:	f241 0301 	movw	r3, #4097	; 0x1001
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d105      	bne.n	80003c4 <SystemClock_Config+0xc0>
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003b8:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <SystemClock_Config+0xd0>)
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <SystemClock_Config+0xd0>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003c2:	6013      	str	r3, [r2, #0]
  }
}
 80003c4:	bf00      	nop
 80003c6:	3750      	adds	r7, #80	; 0x50
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40023800 	.word	0x40023800
 80003d0:	40007000 	.word	0x40007000
 80003d4:	40023c00 	.word	0x40023c00

080003d8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 80003dc:	2002      	movs	r0, #2
 80003de:	f000 f893 	bl	8000508 <BSP_LED_On>
  while(1)
 80003e2:	e7fe      	b.n	80003e2 <Error_Handler+0xa>

080003e4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <HardFault_Handler+0x4>

080003f8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <MemManage_Handler+0x4>

080003fe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000402:	e7fe      	b.n	8000402 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000408:	e7fe      	b.n	8000408 <UsageFault_Handler+0x4>

0800040a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08c      	sub	sp, #48	; 0x30
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d10e      	bne.n	8000446 <BSP_LED_Init+0x2e>
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
 800042c:	4a33      	ldr	r2, [pc, #204]	; (80004fc <BSP_LED_Init+0xe4>)
 800042e:	4b33      	ldr	r3, [pc, #204]	; (80004fc <BSP_LED_Init+0xe4>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
 8000438:	4b30      	ldr	r3, [pc, #192]	; (80004fc <BSP_LED_Init+0xe4>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	f003 0308 	and.w	r3, r3, #8
 8000440:	61bb      	str	r3, [r7, #24]
 8000442:	69bb      	ldr	r3, [r7, #24]
 8000444:	e034      	b.n	80004b0 <BSP_LED_Init+0x98>
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d10e      	bne.n	800046a <BSP_LED_Init+0x52>
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	4a2a      	ldr	r2, [pc, #168]	; (80004fc <BSP_LED_Init+0xe4>)
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <BSP_LED_Init+0xe4>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
 800045c:	4b27      	ldr	r3, [pc, #156]	; (80004fc <BSP_LED_Init+0xe4>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	e022      	b.n	80004b0 <BSP_LED_Init+0x98>
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d10e      	bne.n	800048e <BSP_LED_Init+0x76>
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	4a21      	ldr	r2, [pc, #132]	; (80004fc <BSP_LED_Init+0xe4>)
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <BSP_LED_Init+0xe4>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <BSP_LED_Init+0xe4>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	613b      	str	r3, [r7, #16]
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	e010      	b.n	80004b0 <BSP_LED_Init+0x98>
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d10d      	bne.n	80004b0 <BSP_LED_Init+0x98>
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	4a18      	ldr	r2, [pc, #96]	; (80004fc <BSP_LED_Init+0xe4>)
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <BSP_LED_Init+0xe4>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6313      	str	r3, [r2, #48]	; 0x30
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <BSP_LED_Init+0xe4>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a8:	f003 0308 	and.w	r3, r3, #8
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	4a13      	ldr	r2, [pc, #76]	; (8000500 <BSP_LED_Init+0xe8>)
 80004b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004be:	2301      	movs	r3, #1
 80004c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80004c2:	2302      	movs	r3, #2
 80004c4:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <BSP_LED_Init+0xec>)
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	f107 021c 	add.w	r2, r7, #28
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f9bd 	bl	8000854 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	4a09      	ldr	r2, [pc, #36]	; (8000504 <BSP_LED_Init+0xec>)
 80004de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <BSP_LED_Init+0xe8>)
 80004e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ea:	2200      	movs	r2, #0
 80004ec:	4619      	mov	r1, r3
 80004ee:	f000 fb4b 	bl	8000b88 <HAL_GPIO_WritePin>
}
 80004f2:	bf00      	nop
 80004f4:	3730      	adds	r7, #48	; 0x30
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800
 8000500:	08002734 	.word	0x08002734
 8000504:	20000000 	.word	0x20000000

08000508 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <BSP_LED_On+0x2c>)
 8000516:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <BSP_LED_On+0x30>)
 800051e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000522:	2201      	movs	r2, #1
 8000524:	4619      	mov	r1, r3
 8000526:	f000 fb2f 	bl	8000b88 <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000000 	.word	0x20000000
 8000538:	08002734 	.word	0x08002734

0800053c <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <BSP_LED_Off+0x2c>)
 800054a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <BSP_LED_Off+0x30>)
 8000552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000556:	2200      	movs	r2, #0
 8000558:	4619      	mov	r1, r3
 800055a:	f000 fb15 	bl	8000b88 <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000
 800056c:	08002734 	.word	0x08002734

08000570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <SystemInit+0x60>)
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <SystemInit+0x60>)
 8000578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <SystemInit+0x64>)
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <SystemInit+0x64>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <SystemInit+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000596:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <SystemInit+0x64>)
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <SystemInit+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <SystemInit+0x64>)
 80005a8:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <SystemInit+0x68>)
 80005aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005ac:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <SystemInit+0x64>)
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <SystemInit+0x64>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <SystemInit+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <SystemInit+0x60>)
 80005c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005c4:	609a      	str	r2, [r3, #8]
#endif
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00
 80005d4:	40023800 	.word	0x40023800
 80005d8:	24003010 	.word	0x24003010

080005dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <HAL_Init+0x34>)
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_Init+0x34>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_Init+0x34>)
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_Init+0x34>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f6:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f8f7 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fe:	200f      	movs	r0, #15
 8000600:	f000 f810 	bl	8000624 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000604:	f000 f806 	bl	8000614 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023c00 	.word	0x40023c00

08000614 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_InitTick+0x30>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a09      	ldr	r2, [pc, #36]	; (8000658 <HAL_InitTick+0x34>)
 8000632:	fba2 2303 	umull	r2, r3, r2, r3
 8000636:	099b      	lsrs	r3, r3, #6
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f8fe 	bl	800083a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800063e:	2200      	movs	r2, #0
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000646:	f000 f8dc 	bl	8000802 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000001c 	.word	0x2000001c
 8000658:	10624dd3 	.word	0x10624dd3

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000da4 	.word	0x20000da4

08000674 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_GetREVID+0x14>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	0c1b      	lsrs	r3, r3, #16
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e0042000 	.word	0xe0042000

0800068c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	da0b      	bge.n	800071c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	490d      	ldr	r1, [pc, #52]	; (800073c <NVIC_SetPriority+0x4c>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 030f 	and.w	r3, r3, #15
 800070c:	3b04      	subs	r3, #4
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	0112      	lsls	r2, r2, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	440b      	add	r3, r1
 8000718:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800071a:	e009      	b.n	8000730 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	4908      	ldr	r1, [pc, #32]	; (8000740 <NVIC_SetPriority+0x50>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	e000e100 	.word	0xe000e100

08000744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	2201      	movs	r2, #1
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	401a      	ands	r2, r3
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078a:	2101      	movs	r1, #1
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	1e59      	subs	r1, r3, #1
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	4313      	orrs	r3, r2
         );
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	f7ff ff90 	bl	80006f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff49 	bl	800068c <NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff5e 	bl	80006d4 <NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ff90 	bl	8000744 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5f 	bl	80006f0 <NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffb0 	bl	80007a8 <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	e16b      	b.n	8000b48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000870:	2201      	movs	r2, #1
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	429a      	cmp	r2, r3
 800088a:	f040 815a 	bne.w	8000b42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d003      	beq.n	800089e <HAL_GPIO_Init+0x4a>
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2b12      	cmp	r3, #18
 800089c:	d123      	bne.n	80008e6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	08da      	lsrs	r2, r3, #3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3208      	adds	r2, #8
 80008a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	220f      	movs	r2, #15
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	691a      	ldr	r2, [r3, #16]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	08da      	lsrs	r2, r3, #3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3208      	adds	r2, #8
 80008e0:	69b9      	ldr	r1, [r7, #24]
 80008e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4013      	ands	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f003 0203 	and.w	r2, r3, #3
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4313      	orrs	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d00b      	beq.n	800093a <HAL_GPIO_Init+0xe6>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d007      	beq.n	800093a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092e:	2b11      	cmp	r3, #17
 8000930:	d003      	beq.n	800093a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b12      	cmp	r3, #18
 8000938:	d130      	bne.n	800099c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	2203      	movs	r2, #3
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4013      	ands	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	68da      	ldr	r2, [r3, #12]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4313      	orrs	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000970:	2201      	movs	r2, #1
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	091b      	lsrs	r3, r3, #4
 8000986:	f003 0201 	and.w	r2, r3, #1
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4313      	orrs	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2203      	movs	r2, #3
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4013      	ands	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 80b4 	beq.w	8000b42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4a5f      	ldr	r2, [pc, #380]	; (8000b5c <HAL_GPIO_Init+0x308>)
 80009e0:	4b5e      	ldr	r3, [pc, #376]	; (8000b5c <HAL_GPIO_Init+0x308>)
 80009e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b5c      	ldr	r3, [pc, #368]	; (8000b5c <HAL_GPIO_Init+0x308>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009f6:	4a5a      	ldr	r2, [pc, #360]	; (8000b60 <HAL_GPIO_Init+0x30c>)
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	3302      	adds	r3, #2
 80009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f003 0303 	and.w	r3, r3, #3
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	4013      	ands	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a51      	ldr	r2, [pc, #324]	; (8000b64 <HAL_GPIO_Init+0x310>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d02b      	beq.n	8000a7a <HAL_GPIO_Init+0x226>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a50      	ldr	r2, [pc, #320]	; (8000b68 <HAL_GPIO_Init+0x314>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d025      	beq.n	8000a76 <HAL_GPIO_Init+0x222>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4f      	ldr	r2, [pc, #316]	; (8000b6c <HAL_GPIO_Init+0x318>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d01f      	beq.n	8000a72 <HAL_GPIO_Init+0x21e>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4e      	ldr	r2, [pc, #312]	; (8000b70 <HAL_GPIO_Init+0x31c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d019      	beq.n	8000a6e <HAL_GPIO_Init+0x21a>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4d      	ldr	r2, [pc, #308]	; (8000b74 <HAL_GPIO_Init+0x320>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d013      	beq.n	8000a6a <HAL_GPIO_Init+0x216>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4c      	ldr	r2, [pc, #304]	; (8000b78 <HAL_GPIO_Init+0x324>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d00d      	beq.n	8000a66 <HAL_GPIO_Init+0x212>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4b      	ldr	r2, [pc, #300]	; (8000b7c <HAL_GPIO_Init+0x328>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d007      	beq.n	8000a62 <HAL_GPIO_Init+0x20e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a4a      	ldr	r2, [pc, #296]	; (8000b80 <HAL_GPIO_Init+0x32c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_GPIO_Init+0x20a>
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	e00e      	b.n	8000a7c <HAL_GPIO_Init+0x228>
 8000a5e:	2308      	movs	r3, #8
 8000a60:	e00c      	b.n	8000a7c <HAL_GPIO_Init+0x228>
 8000a62:	2306      	movs	r3, #6
 8000a64:	e00a      	b.n	8000a7c <HAL_GPIO_Init+0x228>
 8000a66:	2305      	movs	r3, #5
 8000a68:	e008      	b.n	8000a7c <HAL_GPIO_Init+0x228>
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x228>
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e004      	b.n	8000a7c <HAL_GPIO_Init+0x228>
 8000a72:	2302      	movs	r3, #2
 8000a74:	e002      	b.n	8000a7c <HAL_GPIO_Init+0x228>
 8000a76:	2301      	movs	r3, #1
 8000a78:	e000      	b.n	8000a7c <HAL_GPIO_Init+0x228>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	69fa      	ldr	r2, [r7, #28]
 8000a7e:	f002 0203 	and.w	r2, r2, #3
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4093      	lsls	r3, r2
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a8c:	4934      	ldr	r1, [pc, #208]	; (8000b60 <HAL_GPIO_Init+0x30c>)
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3302      	adds	r3, #2
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9a:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <HAL_GPIO_Init+0x330>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000abe:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <HAL_GPIO_Init+0x330>)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <HAL_GPIO_Init+0x330>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <HAL_GPIO_Init+0x330>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <HAL_GPIO_Init+0x330>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4013      	ands	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b12:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <HAL_GPIO_Init+0x330>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_GPIO_Init+0x330>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <HAL_GPIO_Init+0x330>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3301      	adds	r3, #1
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	f67f ae90 	bls.w	8000870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b50:	bf00      	nop
 8000b52:	3724      	adds	r7, #36	; 0x24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40013800 	.word	0x40013800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40021400 	.word	0x40021400
 8000b7c:	40021800 	.word	0x40021800
 8000b80:	40021c00 	.word	0x40021c00
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	619a      	str	r2, [r3, #24]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d075      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bd4:	4ba4      	ldr	r3, [pc, #656]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d00c      	beq.n	8000bfa <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000be0:	4ba1      	ldr	r3, [pc, #644]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d112      	bne.n	8000c12 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bec:	4b9e      	ldr	r3, [pc, #632]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bf8:	d10b      	bne.n	8000c12 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfa:	4b9b      	ldr	r3, [pc, #620]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d05b      	beq.n	8000cbe <HAL_RCC_OscConfig+0x102>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d157      	bne.n	8000cbe <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e224      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1a:	d106      	bne.n	8000c2a <HAL_RCC_OscConfig+0x6e>
 8000c1c:	4a92      	ldr	r2, [pc, #584]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c1e:	4b92      	ldr	r3, [pc, #584]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	e01d      	b.n	8000c66 <HAL_RCC_OscConfig+0xaa>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c32:	d10c      	bne.n	8000c4e <HAL_RCC_OscConfig+0x92>
 8000c34:	4a8c      	ldr	r2, [pc, #560]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c36:	4b8c      	ldr	r3, [pc, #560]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4a89      	ldr	r2, [pc, #548]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c42:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e00b      	b.n	8000c66 <HAL_RCC_OscConfig+0xaa>
 8000c4e:	4a86      	ldr	r2, [pc, #536]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	4b85      	ldr	r3, [pc, #532]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4a83      	ldr	r2, [pc, #524]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	4b82      	ldr	r3, [pc, #520]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d013      	beq.n	8000c96 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c6e:	f7ff fcf5 	bl	800065c <HAL_GetTick>
 8000c72:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c74:	e008      	b.n	8000c88 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c76:	f7ff fcf1 	bl	800065c <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b64      	cmp	r3, #100	; 0x64
 8000c82:	d901      	bls.n	8000c88 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e1e9      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c88:	4b77      	ldr	r3, [pc, #476]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0f0      	beq.n	8000c76 <HAL_RCC_OscConfig+0xba>
 8000c94:	e014      	b.n	8000cc0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c96:	f7ff fce1 	bl	800065c <HAL_GetTick>
 8000c9a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9c:	e008      	b.n	8000cb0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9e:	f7ff fcdd 	bl	800065c <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b64      	cmp	r3, #100	; 0x64
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e1d5      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb0:	4b6d      	ldr	r3, [pc, #436]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f0      	bne.n	8000c9e <HAL_RCC_OscConfig+0xe2>
 8000cbc:	e000      	b.n	8000cc0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d077      	beq.n	8000dbc <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ccc:	4b66      	ldr	r3, [pc, #408]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00b      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cd8:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d126      	bne.n	8000d32 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ce4:	4b60      	ldr	r3, [pc, #384]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d120      	bne.n	8000d32 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf0:	4b5d      	ldr	r3, [pc, #372]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <HAL_RCC_OscConfig+0x14c>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d001      	beq.n	8000d08 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e1a9      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d08:	4857      	ldr	r0, [pc, #348]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000d0a:	4b57      	ldr	r3, [pc, #348]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6919      	ldr	r1, [r3, #16]
 8000d16:	23f8      	movs	r3, #248	; 0xf8
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d30:	e044      	b.n	8000dbc <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d02a      	beq.n	8000d90 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d3a:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <HAL_RCC_OscConfig+0x2b0>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc8c 	bl	800065c <HAL_GetTick>
 8000d44:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d48:	f7ff fc88 	bl	800065c <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e180      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f0      	beq.n	8000d48 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d66:	4840      	ldr	r0, [pc, #256]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6919      	ldr	r1, [r3, #16]
 8000d74:	23f8      	movs	r3, #248	; 0xf8
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	fab3 f383 	clz	r3, r3
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	6003      	str	r3, [r0, #0]
 8000d8e:	e015      	b.n	8000dbc <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <HAL_RCC_OscConfig+0x2b0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d96:	f7ff fc61 	bl	800065c <HAL_GetTick>
 8000d9a:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fc5d 	bl	800065c <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e155      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f0      	bne.n	8000d9e <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d030      	beq.n	8000e2a <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d016      	beq.n	8000dfe <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd0:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <HAL_RCC_OscConfig+0x2b4>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dd6:	f7ff fc41 	bl	800065c <HAL_GetTick>
 8000dda:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dde:	f7ff fc3d 	bl	800065c <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e135      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f0      	beq.n	8000dde <HAL_RCC_OscConfig+0x222>
 8000dfc:	e015      	b.n	8000e2a <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <HAL_RCC_OscConfig+0x2b4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e04:	f7ff fc2a 	bl	800065c <HAL_GetTick>
 8000e08:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fc26 	bl	800065c <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e11e      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f0      	bne.n	8000e0c <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 8086 	beq.w	8000f44 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_RCC_OscConfig+0x2ac>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_RCC_OscConfig+0x2b8>)
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_RCC_OscConfig+0x2b8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000e60:	f7ff fbfc 	bl	800065c <HAL_GetTick>
 8000e64:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000e66:	e010      	b.n	8000e8a <HAL_RCC_OscConfig+0x2ce>
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	42470000 	.word	0x42470000
 8000e70:	42470e80 	.word	0x42470e80
 8000e74:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e78:	f7ff fbf0 	bl	800065c <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e0e8      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000e8a:	4b76      	ldr	r3, [pc, #472]	; (8001064 <HAL_RCC_OscConfig+0x4a8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d106      	bne.n	8000eac <HAL_RCC_OscConfig+0x2f0>
 8000e9e:	4a72      	ldr	r2, [pc, #456]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000ea0:	4b71      	ldr	r3, [pc, #452]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eaa:	e01c      	b.n	8000ee6 <HAL_RCC_OscConfig+0x32a>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d10c      	bne.n	8000ece <HAL_RCC_OscConfig+0x312>
 8000eb4:	4a6c      	ldr	r2, [pc, #432]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000eb6:	4b6c      	ldr	r3, [pc, #432]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8000ec0:	4a69      	ldr	r2, [pc, #420]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000ec2:	4b69      	ldr	r3, [pc, #420]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6713      	str	r3, [r2, #112]	; 0x70
 8000ecc:	e00b      	b.n	8000ee6 <HAL_RCC_OscConfig+0x32a>
 8000ece:	4a66      	ldr	r2, [pc, #408]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000ed0:	4b65      	ldr	r3, [pc, #404]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eda:	4a63      	ldr	r2, [pc, #396]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000edc:	4b62      	ldr	r3, [pc, #392]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee0:	f023 0304 	bic.w	r3, r3, #4
 8000ee4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d015      	beq.n	8000f1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eee:	f7ff fbb5 	bl	800065c <HAL_GetTick>
 8000ef2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef4:	e00a      	b.n	8000f0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fbb1 	bl	800065c <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e0a7      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0c:	4b56      	ldr	r3, [pc, #344]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0ee      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x33a>
 8000f18:	e014      	b.n	8000f44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fb9f 	bl	800065c <HAL_GetTick>
 8000f1e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f20:	e00a      	b.n	8000f38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f22:	f7ff fb9b 	bl	800065c <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e091      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1ee      	bne.n	8000f22 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 8086 	beq.w	800105a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f4e:	4b46      	ldr	r3, [pc, #280]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d07d      	beq.n	8001056 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d162      	bne.n	8001028 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <HAL_RCC_OscConfig+0x4b0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fb78 	bl	800065c <HAL_GetTick>
 8000f6c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f70:	f7ff fb74 	bl	800065c <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e06c      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f82:	4b39      	ldr	r3, [pc, #228]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f8e:	4836      	ldr	r0, [pc, #216]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69da      	ldr	r2, [r3, #28]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000f9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	60fb      	str	r3, [r7, #12]
  return(result);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	085b      	lsrs	r3, r3, #1
 8000fbe:	1e59      	subs	r1, r3, #1
 8000fc0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000fc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	fa93 f3a3 	rbit	r3, r3
 8000fcc:	617b      	str	r3, [r7, #20]
  return(result);
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fab3 f383 	clz	r3, r3
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fde:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
 8000fe6:	fa93 f3a3 	rbit	r3, r3
 8000fea:	61fb      	str	r3, [r7, #28]
  return(result);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	fab3 f383 	clz	r3, r3
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_RCC_OscConfig+0x4b0>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fb2c 	bl	800065c <HAL_GetTick>
 8001004:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001008:	f7ff fb28 	bl	800065c <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e020      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x44c>
 8001026:	e018      	b.n	800105a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001028:	4b10      	ldr	r3, [pc, #64]	; (800106c <HAL_RCC_OscConfig+0x4b0>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102e:	f7ff fb15 	bl	800065c <HAL_GetTick>
 8001032:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001036:	f7ff fb11 	bl	800065c <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e009      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <HAL_RCC_OscConfig+0x4ac>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f0      	bne.n	8001036 <HAL_RCC_OscConfig+0x47a>
 8001054:	e001      	b.n	800105a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3738      	adds	r7, #56	; 0x38
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40007000 	.word	0x40007000
 8001068:	40023800 	.word	0x40023800
 800106c:	42470060 	.word	0x42470060

08001070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800107e:	4b81      	ldr	r3, [pc, #516]	; (8001284 <HAL_RCC_ClockConfig+0x214>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 020f 	and.w	r2, r3, #15
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d20c      	bcs.n	80010a6 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108c:	4b7d      	ldr	r3, [pc, #500]	; (8001284 <HAL_RCC_ClockConfig+0x214>)
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001094:	4b7b      	ldr	r3, [pc, #492]	; (8001284 <HAL_RCC_ClockConfig+0x214>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 020f 	and.w	r2, r3, #15
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d001      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0ea      	b.n	800127c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d008      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b2:	4975      	ldr	r1, [pc, #468]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 80010b4:	4b74      	ldr	r3, [pc, #464]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8086 	beq.w	80011de <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d107      	bne.n	80010ea <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d119      	bne.n	800111a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e0c8      	b.n	800127c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d003      	beq.n	80010fa <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d107      	bne.n	800110a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0b8      	b.n	800127c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110a:	4b5f      	ldr	r3, [pc, #380]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e0b0      	b.n	800127c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111a:	495b      	ldr	r1, [pc, #364]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 800111c:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f023 0203 	bic.w	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800112c:	f7ff fa96 	bl	800065c <HAL_GetTick>
 8001130:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d112      	bne.n	8001160 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800113a:	e00a      	b.n	8001152 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113c:	f7ff fa8e 	bl	800065c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f241 3288 	movw	r2, #5000	; 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e094      	b.n	800127c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001152:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d1ee      	bne.n	800113c <HAL_RCC_ClockConfig+0xcc>
 800115e:	e03e      	b.n	80011de <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d112      	bne.n	800118e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001168:	e00a      	b.n	8001180 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800116a:	f7ff fa77 	bl	800065c <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f241 3288 	movw	r2, #5000	; 0x1388
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e07d      	b.n	800127c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001180:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b08      	cmp	r3, #8
 800118a:	d1ee      	bne.n	800116a <HAL_RCC_ClockConfig+0xfa>
 800118c:	e027      	b.n	80011de <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d11d      	bne.n	80011d2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001196:	e00a      	b.n	80011ae <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001198:	f7ff fa60 	bl	800065c <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e066      	b.n	800127c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80011ae:	4b36      	ldr	r3, [pc, #216]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d1ee      	bne.n	8001198 <HAL_RCC_ClockConfig+0x128>
 80011ba:	e010      	b.n	80011de <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	f7ff fa4e 	bl	800065c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e054      	b.n	800127c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1ee      	bne.n	80011bc <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_RCC_ClockConfig+0x214>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 020f 	and.w	r2, r3, #15
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d90c      	bls.n	8001206 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_RCC_ClockConfig+0x214>)
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_RCC_ClockConfig+0x214>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 020f 	and.w	r2, r3, #15
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d001      	beq.n	8001206 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e03a      	b.n	800127c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001212:	491d      	ldr	r1, [pc, #116]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d009      	beq.n	8001244 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001230:	4915      	ldr	r1, [pc, #84]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4313      	orrs	r3, r2
 8001242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001244:	f000 f826 	bl	8001294 <HAL_RCC_GetSysClockFreq>
 8001248:	4601      	mov	r1, r0
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_RCC_ClockConfig+0x218>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001252:	23f0      	movs	r3, #240	; 0xf0
 8001254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	60fb      	str	r3, [r7, #12]
  return(result);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_RCC_ClockConfig+0x21c>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	fa21 f303 	lsr.w	r3, r1, r3
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_RCC_ClockConfig+0x220>)
 8001272:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001274:	200f      	movs	r0, #15
 8001276:	f7ff f9d5 	bl	8000624 <HAL_InitTick>
  
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023c00 	.word	0x40023c00
 8001288:	40023800 	.word	0x40023800
 800128c:	08002744 	.word	0x08002744
 8001290:	2000001c 	.word	0x2000001c

08001294 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b08b      	sub	sp, #44	; 0x2c
 8001298:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_RCC_GetSysClockFreq+0xf0>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d006      	beq.n	80012c4 <HAL_RCC_GetSysClockFreq+0x30>
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d007      	beq.n	80012ca <HAL_RCC_GetSysClockFreq+0x36>
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d158      	bne.n	8001370 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_RCC_GetSysClockFreq+0xf4>)
 80012c0:	623b      	str	r3, [r7, #32]
       break;
 80012c2:	e058      	b.n	8001376 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c4:	4b31      	ldr	r3, [pc, #196]	; (800138c <HAL_RCC_GetSysClockFreq+0xf8>)
 80012c6:	623b      	str	r3, [r7, #32]
      break;
 80012c8:	e055      	b.n	8001376 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_RCC_GetSysClockFreq+0xf0>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d2:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_RCC_GetSysClockFreq+0xf0>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d017      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80012e0:	4a2a      	ldr	r2, [pc, #168]	; (800138c <HAL_RCC_GetSysClockFreq+0xf8>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_RCC_GetSysClockFreq+0xf0>)
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012f0:	400b      	ands	r3, r1
 80012f2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80012f6:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f8:	6979      	ldr	r1, [r7, #20]
 80012fa:	fa91 f1a1 	rbit	r1, r1
 80012fe:	6139      	str	r1, [r7, #16]
  return(result);
 8001300:	6939      	ldr	r1, [r7, #16]
 8001302:	fab1 f181 	clz	r1, r1
 8001306:	40cb      	lsrs	r3, r1
 8001308:	fb03 f302 	mul.w	r3, r3, r2
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	e016      	b.n	800133e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001310:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fbb2 f2f3 	udiv	r2, r2, r3
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_RCC_GetSysClockFreq+0xf0>)
 800131a:	6859      	ldr	r1, [r3, #4]
 800131c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001320:	400b      	ands	r3, r1
 8001322:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001326:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	fa91 f1a1 	rbit	r1, r1
 800132e:	60b9      	str	r1, [r7, #8]
  return(result);
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	fab1 f181 	clz	r1, r1
 8001336:	40cb      	lsrs	r3, r1
 8001338:	fb03 f302 	mul.w	r3, r3, r2
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001346:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800134a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	603b      	str	r3, [r7, #0]
  return(result);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	3301      	adds	r3, #1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8001364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	fbb2 f3f3 	udiv	r3, r2, r3
 800136c:	623b      	str	r3, [r7, #32]
      break;
 800136e:	e002      	b.n	8001376 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001372:	623b      	str	r3, [r7, #32]
      break;
 8001374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001376:	6a3b      	ldr	r3, [r7, #32]
}
 8001378:	4618      	mov	r0, r3
 800137a:	372c      	adds	r7, #44	; 0x2c
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40023800 	.word	0x40023800
 8001388:	00f42400 	.word	0x00f42400
 800138c:	007a1200 	.word	0x007a1200

08001390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f103 0208 	add.w	r2, r3, #8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f103 0208 	add.w	r2, r3, #8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f103 0208 	add.w	r2, r3, #8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001448:	d103      	bne.n	8001452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	e00c      	b.n	800146c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3308      	adds	r3, #8
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e002      	b.n	8001460 <vListInsert+0x2e>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	429a      	cmp	r2, r3
 800146a:	d9f6      	bls.n	800145a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6892      	ldr	r2, [r2, #8]
 80014ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6852      	ldr	r2, [r2, #4]
 80014c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d103      	bne.n	80014d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1e5a      	subs	r2, r3, #1
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001504:	f000 fdd0 	bl	80020a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <pvPortMalloc+0x170>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001510:	f000 f90c 	bl	800172c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001514:	4b55      	ldr	r3, [pc, #340]	; (800166c <pvPortMalloc+0x174>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 808c 	bne.w	800163a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01c      	beq.n	8001562 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001528:	2208      	movs	r2, #8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	2b00      	cmp	r3, #0
 8001538:	d013      	beq.n	8001562 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f023 0307 	bic.w	r3, r3, #7
 8001540:	3308      	adds	r3, #8
 8001542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	2b00      	cmp	r3, #0
 800154c:	d009      	beq.n	8001562 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800154e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001552:	f383 8811 	msr	BASEPRI, r3
 8001556:	f3bf 8f6f 	isb	sy
 800155a:	f3bf 8f4f 	dsb	sy
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e7fe      	b.n	8001560 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d068      	beq.n	800163a <pvPortMalloc+0x142>
 8001568:	4b41      	ldr	r3, [pc, #260]	; (8001670 <pvPortMalloc+0x178>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d863      	bhi.n	800163a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001572:	4b40      	ldr	r3, [pc, #256]	; (8001674 <pvPortMalloc+0x17c>)
 8001574:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <pvPortMalloc+0x17c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800157c:	e004      	b.n	8001588 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	d203      	bcs.n	800159a <pvPortMalloc+0xa2>
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f1      	bne.n	800157e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <pvPortMalloc+0x170>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d04a      	beq.n	800163a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2208      	movs	r2, #8
 80015aa:	4413      	add	r3, r2
 80015ac:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	1ad2      	subs	r2, r2, r3
 80015be:	2308      	movs	r3, #8
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d91e      	bls.n	8001604 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <pvPortMalloc+0xf4>
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	e7fe      	b.n	80015ea <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	1ad2      	subs	r2, r2, r3
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80015fe:	69b8      	ldr	r0, [r7, #24]
 8001600:	f000 f8f6 	bl	80017f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <pvPortMalloc+0x178>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <pvPortMalloc+0x178>)
 8001610:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <pvPortMalloc+0x178>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <pvPortMalloc+0x180>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d203      	bcs.n	8001626 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <pvPortMalloc+0x178>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <pvPortMalloc+0x180>)
 8001624:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <pvPortMalloc+0x174>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	431a      	orrs	r2, r3
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800163a:	f000 fd43 	bl	80020c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <pvPortMalloc+0x164>
 8001648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800164c:	f383 8811 	msr	BASEPRI, r3
 8001650:	f3bf 8f6f 	isb	sy
 8001654:	f3bf 8f4f 	dsb	sy
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e7fe      	b.n	800165a <pvPortMalloc+0x162>
	return pvReturn;
 800165c:	69fb      	ldr	r3, [r7, #28]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000c4c 	.word	0x20000c4c
 800166c:	20000c58 	.word	0x20000c58
 8001670:	20000c50 	.word	0x20000c50
 8001674:	20000c44 	.word	0x20000c44
 8001678:	20000c54 	.word	0x20000c54

0800167c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d046      	beq.n	800171c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800168e:	2308      	movs	r3, #8
 8001690:	425b      	negs	r3, r3
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4413      	add	r3, r2
 8001696:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <vPortFree+0xa8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <vPortFree+0x42>
 80016aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ae:	f383 8811 	msr	BASEPRI, r3
 80016b2:	f3bf 8f6f 	isb	sy
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e7fe      	b.n	80016bc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <vPortFree+0x5e>
 80016c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ca:	f383 8811 	msr	BASEPRI, r3
 80016ce:	f3bf 8f6f 	isb	sy
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	e7fe      	b.n	80016d8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <vPortFree+0xa8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d019      	beq.n	800171c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d115      	bne.n	800171c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <vPortFree+0xa8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001700:	f000 fcd2 	bl	80020a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <vPortFree+0xac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4413      	add	r3, r2
 800170e:	4a06      	ldr	r2, [pc, #24]	; (8001728 <vPortFree+0xac>)
 8001710:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001712:	6938      	ldr	r0, [r7, #16]
 8001714:	f000 f86c 	bl	80017f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001718:	f000 fcd4 	bl	80020c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000c58 	.word	0x20000c58
 8001728:	20000c50 	.word	0x20000c50

0800172c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001732:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001736:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <prvHeapInit+0xac>)
 800173a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3307      	adds	r3, #7
 800174a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f023 0307 	bic.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <prvHeapInit+0xac>)
 800175c:	4413      	add	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <prvHeapInit+0xb0>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <prvHeapInit+0xb0>)
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	4413      	add	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001778:	2208      	movs	r2, #8
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <prvHeapInit+0xb4>)
 800178c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <prvHeapInit+0xb4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <prvHeapInit+0xb4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	1ad2      	subs	r2, r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <prvHeapInit+0xb4>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <prvHeapInit+0xb8>)
 80017ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <prvHeapInit+0xbc>)
 80017c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <prvHeapInit+0xc0>)
 80017c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ca:	601a      	str	r2, [r3, #0]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20000044 	.word	0x20000044
 80017dc:	20000c44 	.word	0x20000c44
 80017e0:	20000c4c 	.word	0x20000c4c
 80017e4:	20000c54 	.word	0x20000c54
 80017e8:	20000c50 	.word	0x20000c50
 80017ec:	20000c58 	.word	0x20000c58

080017f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <prvInsertBlockIntoFreeList+0xac>)
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e002      	b.n	8001804 <prvInsertBlockIntoFreeList+0x14>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3f7      	bcc.n	80017fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	441a      	add	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d108      	bne.n	8001832 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	441a      	add	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	441a      	add	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d118      	bne.n	8001878 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <prvInsertBlockIntoFreeList+0xb0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d00d      	beq.n	800186e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	441a      	add	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e008      	b.n	8001880 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <prvInsertBlockIntoFreeList+0xb0>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e003      	b.n	8001880 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d002      	beq.n	800188e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000c44 	.word	0x20000c44
 80018a0:	20000c4c 	.word	0x20000c4c

080018a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3b04      	subs	r3, #4
 80018b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3b04      	subs	r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f023 0201 	bic.w	r2, r3, #1
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3b04      	subs	r3, #4
 80018d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <pxPortInitialiseStack+0x64>)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3b14      	subs	r3, #20
 80018de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3b04      	subs	r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f06f 0202 	mvn.w	r2, #2
 80018f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3b20      	subs	r3, #32
 80018f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	0800190d 	.word	0x0800190d

0800190c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <prvTaskExitError+0x38>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800191a:	d009      	beq.n	8001930 <prvTaskExitError+0x24>
 800191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	e7fe      	b.n	800192e <prvTaskExitError+0x22>
 8001930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001934:	f383 8811 	msr	BASEPRI, r3
 8001938:	f3bf 8f6f 	isb	sy
 800193c:	f3bf 8f4f 	dsb	sy
 8001940:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8001942:	e7fe      	b.n	8001942 <prvTaskExitError+0x36>
 8001944:	20000020 	.word	0x20000020
	...

08001950 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <pxCurrentTCBConst2>)
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	6808      	ldr	r0, [r1, #0]
 8001956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800195a:	f380 8809 	msr	PSP, r0
 800195e:	f3bf 8f6f 	isb	sy
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f380 8811 	msr	BASEPRI, r0
 800196a:	4770      	bx	lr
 800196c:	f3af 8000 	nop.w

08001970 <pxCurrentTCBConst2>:
 8001970:	20000c64 	.word	0x20000c64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop

08001978 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001978:	4806      	ldr	r0, [pc, #24]	; (8001994 <prvPortStartFirstTask+0x1c>)
 800197a:	6800      	ldr	r0, [r0, #0]
 800197c:	6800      	ldr	r0, [r0, #0]
 800197e:	f380 8808 	msr	MSP, r0
 8001982:	b662      	cpsie	i
 8001984:	b661      	cpsie	f
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	f3bf 8f6f 	isb	sy
 800198e:	df00      	svc	0
 8001990:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001992:	bf00      	nop
 8001994:	e000ed08 	.word	0xe000ed08

08001998 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <xPortStartScheduler+0xf4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a3b      	ldr	r2, [pc, #236]	; (8001a90 <xPortStartScheduler+0xf8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d109      	bne.n	80019bc <xPortStartScheduler+0x24>
 80019a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ac:	f383 8811 	msr	BASEPRI, r3
 80019b0:	f3bf 8f6f 	isb	sy
 80019b4:	f3bf 8f4f 	dsb	sy
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	e7fe      	b.n	80019ba <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80019bc:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <xPortStartScheduler+0xf4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a34      	ldr	r2, [pc, #208]	; (8001a94 <xPortStartScheduler+0xfc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d109      	bne.n	80019da <xPortStartScheduler+0x42>
 80019c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ca:	f383 8811 	msr	BASEPRI, r3
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	f3bf 8f4f 	dsb	sy
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e7fe      	b.n	80019d8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <xPortStartScheduler+0x100>)
 80019dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	22ff      	movs	r2, #255	; 0xff
 80019ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <xPortStartScheduler+0x104>)
 8001a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001a02:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <xPortStartScheduler+0x108>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a08:	e009      	b.n	8001a1e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <xPortStartScheduler+0x108>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <xPortStartScheduler+0x108>)
 8001a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b80      	cmp	r3, #128	; 0x80
 8001a28:	d0ef      	beq.n	8001a0a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <xPortStartScheduler+0x108>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <xPortStartScheduler+0x108>)
 8001a32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <xPortStartScheduler+0x108>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a3c:	4a18      	ldr	r2, [pc, #96]	; (8001aa0 <xPortStartScheduler+0x108>)
 8001a3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001a48:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <xPortStartScheduler+0x10c>)
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <xPortStartScheduler+0x10c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001a54:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <xPortStartScheduler+0x10c>)
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <xPortStartScheduler+0x10c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001a5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001a60:	f000 f8d2 	bl	8001c08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <xPortStartScheduler+0x110>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001a6a:	f000 f8e9 	bl	8001c40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <xPortStartScheduler+0x114>)
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <xPortStartScheduler+0x114>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001a78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001a7a:	f7ff ff7d 	bl	8001978 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001a7e:	f7ff ff45 	bl	800190c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	410fc271 	.word	0x410fc271
 8001a94:	410fc270 	.word	0x410fc270
 8001a98:	e000e400 	.word	0xe000e400
 8001a9c:	20000c5c 	.word	0x20000c5c
 8001aa0:	20000c60 	.word	0x20000c60
 8001aa4:	e000ed20 	.word	0xe000ed20
 8001aa8:	20000020 	.word	0x20000020
 8001aac:	e000ef34 	.word	0xe000ef34

08001ab0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <vPortEnterCritical+0x54>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <vPortEnterCritical+0x54>)
 8001ad0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <vPortEnterCritical+0x54>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10e      	bne.n	8001af8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <vPortEnterCritical+0x58>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <vPortEnterCritical+0x48>
 8001ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae8:	f383 8811 	msr	BASEPRI, r3
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	f3bf 8f4f 	dsb	sy
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	e7fe      	b.n	8001af6 <vPortEnterCritical+0x46>
	}
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20000020 	.word	0x20000020
 8001b08:	e000ed04 	.word	0xe000ed04

08001b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <vPortExitCritical+0x4c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <vPortExitCritical+0x22>
 8001b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1e:	f383 8811 	msr	BASEPRI, r3
 8001b22:	f3bf 8f6f 	isb	sy
 8001b26:	f3bf 8f4f 	dsb	sy
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	e7fe      	b.n	8001b2c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <vPortExitCritical+0x4c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <vPortExitCritical+0x4c>)
 8001b36:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <vPortExitCritical+0x4c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <vPortExitCritical+0x3e>
 8001b40:	2300      	movs	r3, #0
 8001b42:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000020 	.word	0x20000020
 8001b5c:	00000000 	.word	0x00000000

08001b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001b60:	f3ef 8009 	mrs	r0, PSP
 8001b64:	f3bf 8f6f 	isb	sy
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <pxCurrentTCBConst>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f01e 0f10 	tst.w	lr, #16
 8001b70:	bf08      	it	eq
 8001b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b7a:	6010      	str	r0, [r2, #0]
 8001b7c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b84:	f380 8811 	msr	BASEPRI, r0
 8001b88:	f3bf 8f4f 	dsb	sy
 8001b8c:	f3bf 8f6f 	isb	sy
 8001b90:	f000 fc00 	bl	8002394 <vTaskSwitchContext>
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f380 8811 	msr	BASEPRI, r0
 8001b9c:	bc08      	pop	{r3}
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	6808      	ldr	r0, [r1, #0]
 8001ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba6:	f01e 0f10 	tst.w	lr, #16
 8001baa:	bf08      	it	eq
 8001bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001bb0:	f380 8809 	msr	PSP, r0
 8001bb4:	f3bf 8f6f 	isb	sy
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	f3af 8000 	nop.w

08001bc0 <pxCurrentTCBConst>:
 8001bc0:	20000c64 	.word	0x20000c64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop

08001bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8001bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd2:	f383 8811 	msr	BASEPRI, r3
 8001bd6:	f3bf 8f6f 	isb	sy
 8001bda:	f3bf 8f4f 	dsb	sy
 8001bde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001be0:	f000 fb1c 	bl	800221c <xTaskIncrementTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <SysTick_Handler+0x3c>)
 8001bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	e000ed04 	.word	0xe000ed04

08001c08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001c0c:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <vPortSetupTimerInterrupt+0x28>)
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <vPortSetupTimerInterrupt+0x2c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4909      	ldr	r1, [pc, #36]	; (8001c38 <vPortSetupTimerInterrupt+0x30>)
 8001c14:	fba1 1303 	umull	r1, r3, r1, r3
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <vPortSetupTimerInterrupt+0x34>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e014 	.word	0xe000e014
 8001c34:	2000001c 	.word	0x2000001c
 8001c38:	10624dd3 	.word	0x10624dd3
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001c40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001c50 <vPortEnableVFP+0x10>
 8001c44:	6801      	ldr	r1, [r0, #0]
 8001c46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001c4a:	6001      	str	r1, [r0, #0]
 8001c4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001c4e:	bf00      	nop
 8001c50:	e000ed88 	.word	0xe000ed88

08001c54 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af04      	add	r7, sp, #16
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fc45 	bl	80014f8 <pvPortMalloc>
 8001c6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00e      	beq.n	8001c94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c76:	205c      	movs	r0, #92	; 0x5c
 8001c78:	f7ff fc3e 	bl	80014f8 <pvPortMalloc>
 8001c7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
 8001c8a:	e005      	b.n	8001c98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c8c:	6978      	ldr	r0, [r7, #20]
 8001c8e:	f7ff fcf5 	bl	800167c <vPortFree>
 8001c92:	e001      	b.n	8001c98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d013      	beq.n	8001cc6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c9e:	88fa      	ldrh	r2, [r7, #6]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9303      	str	r3, [sp, #12]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f80e 	bl	8001cd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cba:	69f8      	ldr	r0, [r7, #28]
 8001cbc:	f000 f892 	bl	8001de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	e002      	b.n	8001ccc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
	}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b088      	sub	sp, #32
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	461a      	mov	r2, r3
 8001cee:	21a5      	movs	r1, #165	; 0xa5
 8001cf0:	f000 fcfe 	bl	80026f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f023 0307 	bic.w	r3, r3, #7
 8001d0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <prvInitialiseNewTask+0x56>
	__asm volatile
 8001d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e7fe      	b.n	8001d2a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	e012      	b.n	8001d58 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	7819      	ldrb	r1, [r3, #0]
 8001d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	4413      	add	r3, r2
 8001d40:	3334      	adds	r3, #52	; 0x34
 8001d42:	460a      	mov	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	d9e9      	bls.n	8001d32 <prvInitialiseNewTask+0x5c>
 8001d5e:	e000      	b.n	8001d62 <prvInitialiseNewTask+0x8c>
		{
			break;
 8001d60:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	2b07      	cmp	r3, #7
 8001d6e:	d901      	bls.n	8001d74 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d70:	2307      	movs	r3, #7
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	2200      	movs	r2, #0
 8001d84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	3304      	adds	r3, #4
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fb20 	bl	80013d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	3318      	adds	r3, #24
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fb1b 	bl	80013d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	f1c3 0208 	rsb	r2, r3, #8
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db2:	2200      	movs	r2, #0
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	68f9      	ldr	r1, [r7, #12]
 8001dc2:	69b8      	ldr	r0, [r7, #24]
 8001dc4:	f7ff fd6e 	bl	80018a4 <pxPortInitialiseStack>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001dda:	bf00      	nop
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001dec:	f7ff fe60 	bl	8001ab0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001df0:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <prvAddNewTaskToReadyList+0xc0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <prvAddNewTaskToReadyList+0xc0>)
 8001df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <prvAddNewTaskToReadyList+0xc4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001e02:	4a29      	ldr	r2, [pc, #164]	; (8001ea8 <prvAddNewTaskToReadyList+0xc4>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <prvAddNewTaskToReadyList+0xc0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d110      	bne.n	8001e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001e10:	f000 fb32 	bl	8002478 <prvInitialiseTaskLists>
 8001e14:	e00d      	b.n	8001e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <prvAddNewTaskToReadyList+0xc8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d109      	bne.n	8001e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <prvAddNewTaskToReadyList+0xc4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d802      	bhi.n	8001e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001e2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <prvAddNewTaskToReadyList+0xc4>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <prvAddNewTaskToReadyList+0xcc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <prvAddNewTaskToReadyList+0xcc>)
 8001e3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <prvAddNewTaskToReadyList+0xcc>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	2201      	movs	r2, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <prvAddNewTaskToReadyList+0xd0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	4a18      	ldr	r2, [pc, #96]	; (8001eb4 <prvAddNewTaskToReadyList+0xd0>)
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <prvAddNewTaskToReadyList+0xd4>)
 8001e64:	441a      	add	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	f7ff fabc 	bl	80013ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e72:	f7ff fe4b 	bl	8001b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <prvAddNewTaskToReadyList+0xc8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00e      	beq.n	8001e9c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <prvAddNewTaskToReadyList+0xc4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <prvAddNewTaskToReadyList+0xd8>)
 8001e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f3bf 8f4f 	dsb	sy
 8001e98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000d78 	.word	0x20000d78
 8001ea8:	20000c64 	.word	0x20000c64
 8001eac:	20000d84 	.word	0x20000d84
 8001eb0:	20000d94 	.word	0x20000d94
 8001eb4:	20000d80 	.word	0x20000d80
 8001eb8:	20000c68 	.word	0x20000c68
 8001ebc:	e000ed04 	.word	0xe000ed04

08001ec0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <vTaskDelayUntil+0x28>
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e7fe      	b.n	8001ee6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <vTaskDelayUntil+0x42>
 8001eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef2:	f383 8811 	msr	BASEPRI, r3
 8001ef6:	f3bf 8f6f 	isb	sy
 8001efa:	f3bf 8f4f 	dsb	sy
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	e7fe      	b.n	8001f00 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <vTaskDelayUntil+0xe8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <vTaskDelayUntil+0x5e>
 8001f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e7fe      	b.n	8001f1c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8001f1e:	f000 f8c3 	bl	80020a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <vTaskDelayUntil+0xec>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d90b      	bls.n	8001f54 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d911      	bls.n	8001f6a <vTaskDelayUntil+0xaa>
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d90d      	bls.n	8001f6a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
 8001f52:	e00a      	b.n	8001f6a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d803      	bhi.n	8001f66 <vTaskDelayUntil+0xa6>
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d901      	bls.n	8001f6a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8001f66:	2301      	movs	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fb2c 	bl	80025dc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8001f84:	f000 f89e 	bl	80020c4 <xTaskResumeAll>
 8001f88:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <vTaskDelayUntil+0xf0>)
 8001f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f3bf 8f4f 	dsb	sy
 8001f9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000da0 	.word	0x20000da0
 8001fac:	20000d7c 	.word	0x20000d7c
 8001fb0:	e000ed04 	.word	0xe000ed04

08001fb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d016      	beq.n	8001ff4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <vTaskDelay+0x60>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <vTaskDelay+0x2e>
 8001fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd2:	f383 8811 	msr	BASEPRI, r3
 8001fd6:	f3bf 8f6f 	isb	sy
 8001fda:	f3bf 8f4f 	dsb	sy
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	e7fe      	b.n	8001fe0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001fe2:	f000 f861 	bl	80020a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 faf7 	bl	80025dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001fee:	f000 f869 	bl	80020c4 <xTaskResumeAll>
 8001ff2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d107      	bne.n	800200a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <vTaskDelay+0x64>)
 8001ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000da0 	.word	0x20000da0
 8002018:	e000ed04 	.word	0xe000ed04

0800201c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <vTaskStartScheduler+0x74>)
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2300      	movs	r3, #0
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	4919      	ldr	r1, [pc, #100]	; (8002094 <vTaskStartScheduler+0x78>)
 8002030:	4819      	ldr	r0, [pc, #100]	; (8002098 <vTaskStartScheduler+0x7c>)
 8002032:	f7ff fe0f 	bl	8001c54 <xTaskCreate>
 8002036:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d115      	bne.n	800206a <vTaskStartScheduler+0x4e>
 800203e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <vTaskStartScheduler+0x80>)
 8002052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002056:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <vTaskStartScheduler+0x84>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <vTaskStartScheduler+0x88>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002064:	f7ff fc98 	bl	8001998 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002068:	e00d      	b.n	8002086 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002070:	d109      	bne.n	8002086 <vTaskStartScheduler+0x6a>
 8002072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002076:	f383 8811 	msr	BASEPRI, r3
 800207a:	f3bf 8f6f 	isb	sy
 800207e:	f3bf 8f4f 	dsb	sy
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	e7fe      	b.n	8002084 <vTaskStartScheduler+0x68>
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000d9c 	.word	0x20000d9c
 8002094:	0800275c 	.word	0x0800275c
 8002098:	08002449 	.word	0x08002449
 800209c:	20000d98 	.word	0x20000d98
 80020a0:	20000d84 	.word	0x20000d84
 80020a4:	20000d7c 	.word	0x20000d7c

080020a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <vTaskSuspendAll+0x18>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <vTaskSuspendAll+0x18>)
 80020b4:	6013      	str	r3, [r2, #0]
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	20000da0 	.word	0x20000da0

080020c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <xTaskResumeAll+0x114>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <xTaskResumeAll+0x2a>
 80020da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	e7fe      	b.n	80020ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80020ee:	f7ff fcdf 	bl	8001ab0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80020f2:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <xTaskResumeAll+0x114>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	4a37      	ldr	r2, [pc, #220]	; (80021d8 <xTaskResumeAll+0x114>)
 80020fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <xTaskResumeAll+0x114>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d161      	bne.n	80021c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002104:	4b35      	ldr	r3, [pc, #212]	; (80021dc <xTaskResumeAll+0x118>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d05d      	beq.n	80021c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800210c:	e02e      	b.n	800216c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800210e:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <xTaskResumeAll+0x11c>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3318      	adds	r3, #24
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f9c2 	bl	80014a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3304      	adds	r3, #4
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f9bd 	bl	80014a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	2201      	movs	r2, #1
 8002130:	409a      	lsls	r2, r3
 8002132:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <xTaskResumeAll+0x120>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <xTaskResumeAll+0x120>)
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <xTaskResumeAll+0x124>)
 800214a:	441a      	add	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3304      	adds	r3, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f7ff f949 	bl	80013ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <xTaskResumeAll+0x128>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	429a      	cmp	r2, r3
 8002164:	d302      	bcc.n	800216c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002166:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <xTaskResumeAll+0x12c>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <xTaskResumeAll+0x11c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1cc      	bne.n	800210e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800217a:	f000 fa09 	bl	8002590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <xTaskResumeAll+0x130>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800218a:	f000 f847 	bl	800221c <xTaskIncrementTick>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <xTaskResumeAll+0x12c>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3b01      	subs	r3, #1
 800219e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f1      	bne.n	800218a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <xTaskResumeAll+0x130>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <xTaskResumeAll+0x12c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80021b4:	2301      	movs	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <xTaskResumeAll+0x134>)
 80021ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80021c8:	f7ff fca0 	bl	8001b0c <vPortExitCritical>

	return xAlreadyYielded;
 80021cc:	68bb      	ldr	r3, [r7, #8]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000da0 	.word	0x20000da0
 80021dc:	20000d78 	.word	0x20000d78
 80021e0:	20000d38 	.word	0x20000d38
 80021e4:	20000d80 	.word	0x20000d80
 80021e8:	20000c68 	.word	0x20000c68
 80021ec:	20000c64 	.word	0x20000c64
 80021f0:	20000d8c 	.word	0x20000d8c
 80021f4:	20000d88 	.word	0x20000d88
 80021f8:	e000ed04 	.word	0xe000ed04

080021fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <xTaskGetTickCount+0x1c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002208:	687b      	ldr	r3, [r7, #4]
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000d7c 	.word	0x20000d7c

0800221c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002226:	4b50      	ldr	r3, [pc, #320]	; (8002368 <xTaskIncrementTick+0x14c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 808c 	bne.w	8002348 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002230:	4b4e      	ldr	r3, [pc, #312]	; (800236c <xTaskIncrementTick+0x150>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002238:	4a4c      	ldr	r2, [pc, #304]	; (800236c <xTaskIncrementTick+0x150>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d11f      	bne.n	8002284 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002244:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <xTaskIncrementTick+0x154>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <xTaskIncrementTick+0x46>
 800224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	e7fe      	b.n	8002260 <xTaskIncrementTick+0x44>
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <xTaskIncrementTick+0x154>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	4b42      	ldr	r3, [pc, #264]	; (8002374 <xTaskIncrementTick+0x158>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a40      	ldr	r2, [pc, #256]	; (8002370 <xTaskIncrementTick+0x154>)
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4a40      	ldr	r2, [pc, #256]	; (8002374 <xTaskIncrementTick+0x158>)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b40      	ldr	r3, [pc, #256]	; (8002378 <xTaskIncrementTick+0x15c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	4a3e      	ldr	r2, [pc, #248]	; (8002378 <xTaskIncrementTick+0x15c>)
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	f000 f986 	bl	8002590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002284:	4b3d      	ldr	r3, [pc, #244]	; (800237c <xTaskIncrementTick+0x160>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	429a      	cmp	r2, r3
 800228c:	d34d      	bcc.n	800232a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800228e:	4b38      	ldr	r3, [pc, #224]	; (8002370 <xTaskIncrementTick+0x154>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <xTaskIncrementTick+0x80>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <xTaskIncrementTick+0x82>
 800229c:	2300      	movs	r3, #0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a2:	4b36      	ldr	r3, [pc, #216]	; (800237c <xTaskIncrementTick+0x160>)
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a8:	601a      	str	r2, [r3, #0]
					break;
 80022aa:	e03e      	b.n	800232a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022ac:	4b30      	ldr	r3, [pc, #192]	; (8002370 <xTaskIncrementTick+0x154>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d203      	bcs.n	80022cc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80022c4:	4a2d      	ldr	r2, [pc, #180]	; (800237c <xTaskIncrementTick+0x160>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
						break;
 80022ca:	e02e      	b.n	800232a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f8e7 	bl	80014a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3318      	adds	r3, #24
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f8de 	bl	80014a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2201      	movs	r2, #1
 80022ee:	409a      	lsls	r2, r3
 80022f0:	4b23      	ldr	r3, [pc, #140]	; (8002380 <xTaskIncrementTick+0x164>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	4a22      	ldr	r2, [pc, #136]	; (8002380 <xTaskIncrementTick+0x164>)
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <xTaskIncrementTick+0x168>)
 8002308:	441a      	add	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3304      	adds	r3, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f7ff f86a 	bl	80013ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <xTaskIncrementTick+0x16c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	429a      	cmp	r2, r3
 8002322:	d3b4      	bcc.n	800228e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002324:	2301      	movs	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002328:	e7b1      	b.n	800228e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <xTaskIncrementTick+0x16c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	4914      	ldr	r1, [pc, #80]	; (8002384 <xTaskIncrementTick+0x168>)
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d907      	bls.n	8002352 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002342:	2301      	movs	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e004      	b.n	8002352 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <xTaskIncrementTick+0x170>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	4a0f      	ldr	r2, [pc, #60]	; (800238c <xTaskIncrementTick+0x170>)
 8002350:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <xTaskIncrementTick+0x174>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800235a:	2301      	movs	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800235e:	697b      	ldr	r3, [r7, #20]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000da0 	.word	0x20000da0
 800236c:	20000d7c 	.word	0x20000d7c
 8002370:	20000d30 	.word	0x20000d30
 8002374:	20000d34 	.word	0x20000d34
 8002378:	20000d90 	.word	0x20000d90
 800237c:	20000d98 	.word	0x20000d98
 8002380:	20000d80 	.word	0x20000d80
 8002384:	20000c68 	.word	0x20000c68
 8002388:	20000c64 	.word	0x20000c64
 800238c:	20000d88 	.word	0x20000d88
 8002390:	20000d8c 	.word	0x20000d8c

08002394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <vTaskSwitchContext+0xa0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <vTaskSwitchContext+0xa4>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80023a8:	e03e      	b.n	8002428 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80023aa:	4b23      	ldr	r3, [pc, #140]	; (8002438 <vTaskSwitchContext+0xa4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80023b0:	4b22      	ldr	r3, [pc, #136]	; (800243c <vTaskSwitchContext+0xa8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80023be:	7afb      	ldrb	r3, [r7, #11]
 80023c0:	f1c3 031f 	rsb	r3, r3, #31
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	491e      	ldr	r1, [pc, #120]	; (8002440 <vTaskSwitchContext+0xac>)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <vTaskSwitchContext+0x5a>
	__asm volatile
 80023da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	e7fe      	b.n	80023ec <vTaskSwitchContext+0x58>
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4a11      	ldr	r2, [pc, #68]	; (8002440 <vTaskSwitchContext+0xac>)
 80023fa:	4413      	add	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	3308      	adds	r3, #8
 8002410:	429a      	cmp	r2, r3
 8002412:	d104      	bne.n	800241e <vTaskSwitchContext+0x8a>
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <vTaskSwitchContext+0xb0>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	20000da0 	.word	0x20000da0
 8002438:	20000d8c 	.word	0x20000d8c
 800243c:	20000d80 	.word	0x20000d80
 8002440:	20000c68 	.word	0x20000c68
 8002444:	20000c64 	.word	0x20000c64

08002448 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002450:	f000 f852 	bl	80024f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <prvIdleTask+0x28>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d9f9      	bls.n	8002450 <prvIdleTask+0x8>
			{
				taskYIELD();
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <prvIdleTask+0x2c>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800246c:	e7f0      	b.n	8002450 <prvIdleTask+0x8>
 800246e:	bf00      	nop
 8002470:	20000c68 	.word	0x20000c68
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	e00c      	b.n	800249e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <prvInitialiseTaskLists+0x60>)
 8002490:	4413      	add	r3, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe ff7c 	bl	8001390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3301      	adds	r3, #1
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b07      	cmp	r3, #7
 80024a2:	d9ef      	bls.n	8002484 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80024a4:	480d      	ldr	r0, [pc, #52]	; (80024dc <prvInitialiseTaskLists+0x64>)
 80024a6:	f7fe ff73 	bl	8001390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024aa:	480d      	ldr	r0, [pc, #52]	; (80024e0 <prvInitialiseTaskLists+0x68>)
 80024ac:	f7fe ff70 	bl	8001390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024b0:	480c      	ldr	r0, [pc, #48]	; (80024e4 <prvInitialiseTaskLists+0x6c>)
 80024b2:	f7fe ff6d 	bl	8001390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024b6:	480c      	ldr	r0, [pc, #48]	; (80024e8 <prvInitialiseTaskLists+0x70>)
 80024b8:	f7fe ff6a 	bl	8001390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <prvInitialiseTaskLists+0x74>)
 80024be:	f7fe ff67 	bl	8001390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <prvInitialiseTaskLists+0x78>)
 80024c4:	4a05      	ldr	r2, [pc, #20]	; (80024dc <prvInitialiseTaskLists+0x64>)
 80024c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <prvInitialiseTaskLists+0x7c>)
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <prvInitialiseTaskLists+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000c68 	.word	0x20000c68
 80024dc:	20000d08 	.word	0x20000d08
 80024e0:	20000d1c 	.word	0x20000d1c
 80024e4:	20000d38 	.word	0x20000d38
 80024e8:	20000d4c 	.word	0x20000d4c
 80024ec:	20000d64 	.word	0x20000d64
 80024f0:	20000d30 	.word	0x20000d30
 80024f4:	20000d34 	.word	0x20000d34

080024f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024fe:	e028      	b.n	8002552 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002500:	f7ff fdd2 	bl	80020a8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <prvCheckTasksWaitingTermination+0x6c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002514:	f7ff fdd6 	bl	80020c4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800251e:	f7ff fac7 	bl	8001ab0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <prvCheckTasksWaitingTermination+0x6c>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	3304      	adds	r3, #4
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe ffb8 	bl	80014a4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <prvCheckTasksWaitingTermination+0x70>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3b01      	subs	r3, #1
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <prvCheckTasksWaitingTermination+0x70>)
 800253c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <prvCheckTasksWaitingTermination+0x74>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3b01      	subs	r3, #1
 8002544:	4a09      	ldr	r2, [pc, #36]	; (800256c <prvCheckTasksWaitingTermination+0x74>)
 8002546:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002548:	f7ff fae0 	bl	8001b0c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800254c:	6838      	ldr	r0, [r7, #0]
 800254e:	f000 f80f 	bl	8002570 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <prvCheckTasksWaitingTermination+0x74>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1d2      	bne.n	8002500 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000d4c 	.word	0x20000d4c
 8002568:	20000d78 	.word	0x20000d78
 800256c:	20000d60 	.word	0x20000d60

08002570 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff f87d 	bl	800167c <vPortFree>
			vPortFree( pxTCB );
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff f87a 	bl	800167c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <prvResetNextTaskUnblockTime+0x44>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <prvResetNextTaskUnblockTime+0x14>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <prvResetNextTaskUnblockTime+0x16>
 80025a4:	2300      	movs	r3, #0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <prvResetNextTaskUnblockTime+0x48>)
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80025b2:	e008      	b.n	80025c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <prvResetNextTaskUnblockTime+0x44>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <prvResetNextTaskUnblockTime+0x48>)
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000d30 	.word	0x20000d30
 80025d8:	20000d98 	.word	0x20000d98

080025dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025e6:	4b29      	ldr	r3, [pc, #164]	; (800268c <prvAddCurrentTaskToDelayedList+0xb0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3304      	adds	r3, #4
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe ff56 	bl	80014a4 <uxListRemove>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	2201      	movs	r2, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <prvAddCurrentTaskToDelayedList+0xb8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4013      	ands	r3, r2
 8002612:	4a20      	ldr	r2, [pc, #128]	; (8002694 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002614:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800261c:	d10a      	bne.n	8002634 <prvAddCurrentTaskToDelayedList+0x58>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3304      	adds	r3, #4
 800262a:	4619      	mov	r1, r3
 800262c:	481a      	ldr	r0, [pc, #104]	; (8002698 <prvAddCurrentTaskToDelayedList+0xbc>)
 800262e:	f7fe fedc 	bl	80013ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002632:	e026      	b.n	8002682 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d209      	bcs.n	8002660 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <prvAddCurrentTaskToDelayedList+0xc0>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3304      	adds	r3, #4
 8002656:	4619      	mov	r1, r3
 8002658:	4610      	mov	r0, r2
 800265a:	f7fe feea 	bl	8001432 <vListInsert>
}
 800265e:	e010      	b.n	8002682 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3304      	adds	r3, #4
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
 800266e:	f7fe fee0 	bl	8001432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	d202      	bcs.n	8002682 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800267c:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6013      	str	r3, [r2, #0]
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000d7c 	.word	0x20000d7c
 8002690:	20000c64 	.word	0x20000c64
 8002694:	20000d80 	.word	0x20000d80
 8002698:	20000d64 	.word	0x20000d64
 800269c:	20000d34 	.word	0x20000d34
 80026a0:	20000d30 	.word	0x20000d30
 80026a4:	20000d98 	.word	0x20000d98

080026a8 <__libc_init_array>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	4e0d      	ldr	r6, [pc, #52]	; (80026e0 <__libc_init_array+0x38>)
 80026ac:	4c0d      	ldr	r4, [pc, #52]	; (80026e4 <__libc_init_array+0x3c>)
 80026ae:	1ba4      	subs	r4, r4, r6
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	2500      	movs	r5, #0
 80026b4:	42a5      	cmp	r5, r4
 80026b6:	d109      	bne.n	80026cc <__libc_init_array+0x24>
 80026b8:	4e0b      	ldr	r6, [pc, #44]	; (80026e8 <__libc_init_array+0x40>)
 80026ba:	4c0c      	ldr	r4, [pc, #48]	; (80026ec <__libc_init_array+0x44>)
 80026bc:	f000 f820 	bl	8002700 <_init>
 80026c0:	1ba4      	subs	r4, r4, r6
 80026c2:	10a4      	asrs	r4, r4, #2
 80026c4:	2500      	movs	r5, #0
 80026c6:	42a5      	cmp	r5, r4
 80026c8:	d105      	bne.n	80026d6 <__libc_init_array+0x2e>
 80026ca:	bd70      	pop	{r4, r5, r6, pc}
 80026cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026d0:	4798      	blx	r3
 80026d2:	3501      	adds	r5, #1
 80026d4:	e7ee      	b.n	80026b4 <__libc_init_array+0xc>
 80026d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026da:	4798      	blx	r3
 80026dc:	3501      	adds	r5, #1
 80026de:	e7f2      	b.n	80026c6 <__libc_init_array+0x1e>
 80026e0:	08002764 	.word	0x08002764
 80026e4:	08002764 	.word	0x08002764
 80026e8:	08002764 	.word	0x08002764
 80026ec:	08002768 	.word	0x08002768

080026f0 <memset>:
 80026f0:	4402      	add	r2, r0
 80026f2:	4603      	mov	r3, r0
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d100      	bne.n	80026fa <memset+0xa>
 80026f8:	4770      	bx	lr
 80026fa:	f803 1b01 	strb.w	r1, [r3], #1
 80026fe:	e7f9      	b.n	80026f4 <memset+0x4>

08002700 <_init>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr

0800270c <_fini>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr
